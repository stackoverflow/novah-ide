{
  "Case": {
    "prefix": "case",
    "body": "case ${1:expression} of\n  ${2:pattern} -> ${3:expression}"
  },
  "Foreign": {
    "prefix": "foreign",
    "body": "foreign import ${1:class}"
  },
  "If": {
    "prefix": "if",
    "body": "if ${1:condition} then ${2:branch} else ${3:branch}"
  },
  "Import": {
    "prefix": "import",
    "body": "import ${1:novah}"
  },
  "Let": {
    "prefix": "let",
    "body": "let ${1:binding} = ${2:expression}"
  },
  "Module": {
    "prefix": "module",
    "body": "module ${1:main}"
  },
  "Opaque": {
    "prefix": "opaque",
    "body": "opaque type ${1:Name} = ${2:Type}"
  },
  "Typealias": {
    "prefix": "typealias",
    "body": "typealias ${1:Name} = ${2:Type}"
  },
  "Type": {
    "prefix": "type",
    "body": "type ${1:Name} = ${2:Type}"
  },
  "Public": {
    "prefix": "pub",
    "body": "pub\n${1:name} : ${2:type}\n${1:name} ${3:par} = ${4:body}"
  },
  "Public Instance": {
    "prefix": "pub instance",
    "body": "pub instance\n${1:name} : ${2:type}\n${1:name} ${3:par} = ${4:body}"
  },
  "Documentantion": {
    "prefix": "doc",
    "body": "/**\n * ${1:doc}\n */"
  },
  "Documentantion2": {
    "prefix": "/**",
    "body": "/**\n * ${1:doc}\n */"
  },
  "While": {
    "prefix": "while",
    "body": "while ${1:pred} then\n  ${2:body}"
  },
  "Try": {
    "prefix": "try",
    "body": "try\n  ${1:body}\ncatch\n  :? ${2:Type} -> ${3:handler}"
  },
  "Return": {
    "prefix": "return",
    "body": "return ${1:value}"
  },
  "Yield": {
    "prefix": "yield",
    "body": "yield ${1:value}"
  },
  "For": {
    "prefix": "for",
    "body": "for ${1:pattern} in ${2:exp} do\n  ${3:yield}"
  },
  "ForYield": {
    "prefix": "foryield",
    "body": "for ${1:pattern} in ${2:exp} do yield ${1:pattern}"
  }
}