{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		"novah"
	],
	"name": "Novah",
	"patterns": [
		{
			"name": "meta.declaration.module.novah",
			"begin": "^\\s*(module)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"captures": {
				"1": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#module_name"
				},
				{
					"name": "invalid.novah",
					"match": "[A-Z]+"
				}
			]
		},
		{
			"name": "meta.import.novah",
			"begin": "^\\s*(import)\\b",
			"end": "($|(?=//))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#module_imports"
				},
				{
					"match": "\\b(as)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.type.novah"
						}
					}
				},
				{
					"include": "#module_name"
				},
				{
					"include": "#comments"
				}
			]
		},
		{
			"name": "meta.foreign.getset.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\s+(get|set)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				},
				"4": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				},
				{
					"include": "#colon"
				}
			]
		},
		{
			"name": "meta.foreign.typenew.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\s+(type|new)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				},
				"4": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				}
			]
		},
		{
			"name": "meta.foreign.method.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				}
			]
		},
		{
			"name": "meta.typealias.novah",
			"begin": "^(\\s*)(typealias)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "storage.type.data.novah"
				},
				"3": {
					"name": "entity.type-signature.novah",
					"patterns": [
						{
							"include": "#type_signature"
						}
					]
				}
			},
			"patterns": [
				{
					"match": "=",
					"captures": {
						"0": {
							"name": "keyword.operator.assignment.novah"
						}
					}
				},
				{
          "include": "#type_signature"
        },
				{
          "include": "#record_types"
        },
				{
          "include": "#comments"
        }
			]
		},
		{
			"include": "#comments"
		},
		{
			"name": "constant.language.boolean.novah",
			"match": "\\b(true|false)\\b"
		},
		{
			"name": "keyword.other.novah",
			"match": "\\b(foreign|import|type|typealias|opaque)(?!')\\b"
		}
	],
	"repository": {
		"module_name": {
			"patterns": [
				{
					"name": "support.other.module.novah",
					"match": "(?:[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(?:\\.[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)*[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.?"
				}
			]
		},
		"colon": {
			"patterns": [
				{
					"name": "keyword.other.colon.novah",
					"match": "(?::)"
				}
			]
		},
		"data_ctor": {
			"patterns": [
				{
					"name": "entity.name.tag.novah",
					"match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.novah",
					"match": "\\b(if|then|else|case|of)\\b"
				},
				{
					"name": "keyword.other.novah",
					"match": "\\b(foreign)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash",
					"begin": "(^[ \t]+)?(?=//)",
					"end": "(?!\\G)"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.novah",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.novah",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.quoted.tripple.novah",
					"begin": "\"\"\"",
					"end": "\"\"\""
				}
			]
		},
		"infix_op": {
			"patterns": [
				{
					"name": "entity.name.function.infix.novah",
					"match": "(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"']]+\\))"
				}
			]
		},
		"type_name": {
			"patterns": [
				{
					"name": "entity.name.type.novah",
					"match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*"
				}
			]
		},
		"generic_type": {
			"patterns": [
				{
					"name": "variable.other.generic-type.novah",
					"match": "\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
				}
			]
		},
		"type_signature": {
			"patterns": [
				{
					"name": "keyword.other.arrow.novah",
					"match": "->"
				},
				{
					"include": "#generic_type"
				},
				{
					"include": "#type_name"
				},
				{
					"include": "#comments"
				}
			]
		},
		"record_types": {
      "patterns": [
        {
          "name": "meta.type.record.novah",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.type.record.begin.novah"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.type.record.end.novah"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.comma.novah",
              "match": ","
            },
            {
              "include": "#record_field_declaration"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
		"record_field_declaration": {
      "patterns": [
        {
          "name": "meta.record-field.type-declaration.novah",
          "begin": "([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)\\s*(:)",
          "end": "(?=([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)\\s*(:)|})",
          "contentName": "meta.type-signature.novah",
          "beginCaptures": {
            "1": {
              "patterns": [
                {
                  "name": "entity.other.attribute-name.novah",
                  "match": "(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
                }
              ]
            },
            "2": {
              "name": "keyword.other.colon.novah"
            }
          },
          "patterns": [
            {
              "include": "#type_signature"
            },
            {
              "include": "#record_types"
            }
          ]
        }
      ]
    },
		"module_imports": {
			"patterns": [
				{
					"name": "meta.declaration.imports.novah",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "entity.name.function.novah",
							"match": "\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
						},
						{
							"include": "#type_name"
						},
						{
							"name": "punctuation.separator.comma.novah",
							"match": ","
						},
						{
							"include": "#infix_op"
						},
						{
							"name": "meta.other.constructor-list.novah",
							"match": "\\(.*?\\)"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.novah"
}