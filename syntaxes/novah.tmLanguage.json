{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"fileTypes": [
		"novah"
	],
	"name": "Novah",
	"patterns": [
		{
			"name": "meta.declaration.module.novah",
			"begin": "^\\s*(module)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"captures": {
				"1": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#module_name"
				},
				{
					"name": "invalid.novah",
					"match": "[A-Z]+"
				}
			]
		},
		{
			"name": "meta.import.novah",
			"begin": "^\\s*(import)\\b",
			"end": "($|(?=//))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#module_imports"
				},
				{
					"match": "\\b(as)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.type.novah"
						}
					}
				},
				{
					"include": "#module_name"
				},
				{
					"include": "#comments"
				}
			]
		},
		{
			"name": "meta.foreign.getset.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\s+(get|set)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				},
				"4": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				},
				{
					"include": "#colon"
				}
			]
		},
		{
			"name": "meta.foreign.typenew.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\s+(type|new)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				},
				"4": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				}
			]
		},
		{
			"name": "meta.foreign.method.novah",
			"begin": "^(\\s*)(foreign)\\s+(import)\\b",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "keyword.other.novah"
				},
				"3": {
					"name": "keyword.other.novah"
				}
			},
			"patterns": [
				{
					"include": "#type_name"
				},
				{
					"match": "\\b(as)\\s+([\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
					"captures": {
						"1": {
							"name": "keyword.other.novah"
						},
						"2": {
							"name": "entity.name.function.novah"
						}
					}
				},
				{
					"include": "#module_name"
				}
			]
		},
		{
			"name": "meta.typealias.novah",
			"begin": "^(\\s*)(typealias)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "storage.type.data.novah"
				},
				"3": {
					"name": "entity.type-signature.novah",
					"patterns": [
						{
							"include": "#type_signature"
						}
					]
				}
			},
			"patterns": [
				{
					"match": "=",
					"captures": {
						"0": {
							"name": "keyword.operator.assignment.novah"
						}
					}
				},
				{
          "include": "#type_signature"
        },
				{
          "include": "#record_types"
        },
				{
          "include": "#comments"
        }
			]
		},
		{
			"name": "meta.type.novah",
			"begin": "^(\\s)*(type)\\s+(.+?)\\s*(?=\\=|$)",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "storage.type.data.novah"
				},
				"3": {
					"name": "entity.type-signature.novah",
					"patterns": [
						{
							"include": "#type_signature"
						}
					]
				}
			},
			"patterns": [
				{
					"match": "=",
					"captures": {
						"0": {
							"name": "keyword.operator.assignment.novah"
						}
					}
				},
				{
          "match": "(?:(?:\\b([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*)\\s+)(?:(?<ctorArgs>(?:(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*|(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*|(?:(?:[\\w()\\[\\],]|->)+\\s*)+))(?:\\s*(?:\\s+)\\s*\\g<ctorArgs>)?)?))",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#data_ctor"
                }
              ]
            },
            "2": {
              "name": "meta.type-signature.novah",
              "patterns": [
                {
                  "include": "#type_signature"
                }
              ]
            }
          }
        },
				{
          "match": "\\|",
          "captures": {
            "0": {
              "name": "punctuation.separator.pipe.novah"
            }
          }
        },
				{
          "include": "#record_types"
        },
				{
          "include": "#comments"
        }
			]
		},
		{
			"name": "meta.opaque.type.novah",
			"begin": "^(\\s*)(opaque)\\s+(type)\\s+([\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*)",
			"end": "^(?!\\1[ \\t]|[ \\t]*$)",
			"beginCaptures": {
				"2": {
					"name": "storage.type.data.novah"
				},
				"3": {
					"name": "storage.type.data.novah"
				},
				"4": {
					"name": "entity.type-signature.novah",
					"patterns": [
						{
							"include": "#type_signature"
						}
					]
				}
			},
			"patterns": [
				{
					"match": "=",
					"captures": {
						"0": {
							"name": "keyword.operator.assignment.novah"
						}
					}
				},
				{
          "include": "#type_signature"
        },
				{
          "include": "#record_types"
        },
				{
          "include": "#comments"
        }
			]
		},
		{
			"include": "#comments"
		},
		{
			"name": "constant.language.boolean.novah",
			"match": "\\b(true|false)\\b"
		},
		{
			"name": "keyword.other.pubplus.novah",
			"match": "pub\\+"
		},
		{
			"name": "keyword.other.novah",
			"match": "\\b(foreign|import|type|typealias|opaque|pub|instance|as)(?!')\\b"
		},
		{
      "name": "keyword.control.novah",
      "match": "\\b(do|if|then|else|case|of|let|in|throw|try|catch|finally|while)(?!')\\b"
    },
		{
      "name": "constant.numeric.hex.novah",
      "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+[L]?\\b(?!\\$)"
    },
		{
      "name": "constant.numeric.bin.novah",
      "match": "\\b(?<!\\$)0(b|B)[0-1]+[L]?\\b(?!\\$)"
    },
		{
      "name": "constant.numeric.int.novah",
      "match": "\\b(?<!\\$)[0-9]+[L]?\\b(?!\\$)"
    },
		{
      "name": "constant.numeric.novah",
      "match": "\\b[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?[F]?\\b"
    },
		{
      "name": "string.quoted.triple.novah",
      "begin": "\"\"\"",
      "end": "\"\"\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.novah"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.novah"
        }
      }
    },
		{
			"name": "string.quoted.double.novah",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.novah",
					"match": "\\\\."
				}
			]
		},
		{
      "name": "string.quoted.single.novah",
      "match": "(')((?:[ -\\[\\]-~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]))|(\\\\o[0-7]+)|(\\\\u[0-9A-Fa-f]+)|(\\^[A-Z@\\[\\]\\\\\\^_])))(')",
      "captures": {
        "1": {
          "name": "punctuation.definition.string.begin.novah"
        },
        "2": {
          "patterns": [
            {
              "include": "#characters"
            }
          ]
        },
        "7": {
          "name": "punctuation.definition.string.end.novah"
        }
      }
    },
		{
      "include": "#function_type_declaration"
    },
		{
			"include": "#operator_type_declaration"
		},
		{
      "include": "#data_ctor"
    },
		{
      "include": "#comments"
    },
		{
      "name": "keyword.other.arrow.novah",
      "match": "\\-\\>"
    },
		{
      "name": "keyword.operator.novah",
      "match": "(?<!pub)[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"]]+"
    },
		{
      "name": "punctuation.separator.comma.novah",
      "match": ","
    }
	],
	"repository": {
		"module_name": {
			"patterns": [
				{
					"name": "support.other.module.novah",
					"match": "(?:[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}']*(?:\\.[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)*[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Ll}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.?"
				}
			]
		},
		"colon": {
			"patterns": [
				{
					"name": "keyword.other.colon.novah",
					"match": "(?::)"
				}
			]
		},
		"data_ctor": {
			"patterns": [
				{
					"name": "entity.name.tag.novah",
					"match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-dash.novah",
					"begin": "//",
					"end": "\\n",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.novah"
						}
					}
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"block_comment": {
      "patterns": [
				{
          "name": "comment.block.documentation.novah",
          "begin": "/\\*\\*",
          "end": "\\*/",
          "applyEndPatternLast": 1,
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.documentation.novah"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.documentation.novah"
            }
          },
          "patterns": [
            {
              "include": "#block_comment"
            }
          ]
        },
        {
          "name": "comment.block.novah",
          "begin": "/\\*",
          "end": "\\*/",
          "applyEndPatternLast": 1,
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.novah"
            }
          },
          "patterns": [
            {
              "include": "#block_comment"
            }
          ]
        }
      ]
    },
		"characters": {
      "patterns": [
        {
          "match": "(?:[ -\\[\\]-~]|(\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\"'\\&]))|(\\\\o[0-7]+)|(\\\\u[0-9A-Fa-f]+)|(\\^[A-Z@\\[\\]\\\\\\^_]))",
          "captures": {
            "1": {
              "name": "constant.character.escape.novah"
            },
            "2": {
              "name": "constant.character.escape.octal.novah"
            },
            "3": {
              "name": "constant.character.escape.hexadecimal.novah"
            },
            "4": {
              "name": "constant.character.escape.control.novah"
            }
          }
        }
      ]
    },
		"infix_op": {
			"patterns": [
				{
					"name": "entity.name.function.infix.novah",
					"match": "(?:\\((?!--+\\))[\\p{S}\\p{P}&&[^(),;\\[\\]`{}_\"]]+\\))"
				}
			]
		},
		"function_type_declaration": {
      "patterns": [
        {
          "name": "meta.function.type-declaration.novah",
          "begin": "^(\\s*)([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)\\s*(?:(:)(?!.*<-))",
          "end": "^(?!\\1[ \\t]|[ \\t]*$)",
          "contentName": "meta.type-signature.novah",
          "beginCaptures": {
            "2": {
              "name": "entity.name.function.novah"
            },
            "3": {
              "name": "keyword.other.colon.novah"
            }
          },
          "patterns": [
            {
              "include": "#colon"
            },
            {
              "include": "#type_signature"
            }
          ]
        }
      ]
    },
		"operator_type_declaration": {
      "patterns": [
        {
          "name": "meta.function.type-declaration.novah",
          "begin": "^(\\s*)\\([$=<>\\|&+:*/%^.?!-]+\\)\\s+:",
          "end": "^(?!\\1[ \\t]|[ \\t]*$)",
          "contentName": "meta.type-signature.novah",
          "beginCaptures": {
            "2": {
              "name": "entity.name.function.novah"
            },
            "3": {
              "name": "keyword.other.colon.novah"
            }
          },
          "patterns": [
            {
              "include": "#colon"
            },
            {
              "include": "#type_signature"
            }
          ]
        }
      ]
    },
		"type_name": {
			"patterns": [
				{
					"name": "entity.name.type.novah",
					"match": "\\b[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*"
				}
			]
		},
		"generic_type": {
			"patterns": [
				{
					"name": "variable.other.generic-type.novah",
					"match": "\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
				}
			]
		},
		"type_signature": {
			"patterns": [
				{
					"name": "keyword.other.arrow.novah",
					"match": "->"
				},
				{
					"include": "#generic_type"
				},
				{
					"include": "#type_name"
				},
				{
					"include": "#comments"
				}
			]
		},
		"record_types": {
      "patterns": [
        {
          "name": "meta.type.record.novah",
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.type.record.begin.novah"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.type.record.end.novah"
            }
          },
          "patterns": [
            {
              "name": "punctuation.separator.comma.novah",
              "match": ","
            },
            {
              "include": "#record_field_declaration"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
		"record_field_declaration": {
      "patterns": [
        {
          "name": "meta.record-field.type-declaration.novah",
          "begin": "([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)\\s*(:)",
          "end": "(?=([\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)\\s*(:)|})",
          "contentName": "meta.type-signature.novah",
          "beginCaptures": {
            "1": {
              "patterns": [
                {
                  "name": "entity.other.attribute-name.novah",
                  "match": "(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
                }
              ]
            },
            "2": {
              "name": "keyword.other.colon.novah"
            }
          },
          "patterns": [
            {
              "include": "#type_signature"
            },
            {
              "include": "#record_types"
            }
          ]
        }
      ]
    },
		"module_imports": {
			"patterns": [
				{
					"name": "meta.declaration.imports.novah",
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "entity.name.function.novah",
							"match": "\\b(?:[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*(?:\\.[\\p{Lu}\\p{Lt}][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*)*\\.)?[\\p{Ll}_][\\p{Ll}_\\p{Lu}\\p{Lt}\\p{Nd}]*"
						},
						{
							"include": "#type_name"
						},
						{
							"name": "punctuation.separator.comma.novah",
							"match": ","
						},
						{
							"include": "#infix_op"
						},
						{
							"name": "meta.other.constructor-list.novah",
							"match": "\\(.*?\\)"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.novah"
}